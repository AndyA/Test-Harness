General Todo
------------

    - Support multiple formatters

    - update HACKING.pod: now lives in Git

    - Associate YAML diagnostic with the preceding test. Currently it's
      necessary to look ahead past a test to discover whether it has a
      diagnostic document.
      
    - Parallel testing scheduler rules.


Multiple Formatters
-------------------

Clean up TAP::Formatter API
* shouldn't be required to inherit from TAP::Formatter::Base
* TAP::Formatter::Base has console-specific code
* current funtionality:
    $self->formatter->summary($aggregate);
    $self->formatter->verbosity
    $self->formatter->prepare( map { $_->description } $scheduler->get_all );
    my $session = $self->formatter->open_test( $job->description, $parser );
* TAP::Formatter::*::Session is the hardest one...

Add support for 'formatters' to TAP::Harness
* formatters => {
    Console => { colour => '/path/to/custom/perl', verbosity => 0 },
    File => { outfile => '/foo.tap' },
    HTML => { outfile => '/foo.html', js_uris => [ ... ] },
    SQL => { dsn => 'dbi:sqlite:/bar.db' },
  }
* What to do with common params? pass to all formatters?
* Where to load formatters?
* Support short naming: HTML => TAP::Formatter::HTML
* What to do with existing params...
** formatter: ?
** formatter_class: ?
* implementation idea: have a single formatter that simply contains a list
  of instantiated formatters, and delegates api calls to all of them?

Add support to Test::Harness?
* required?

Add support to App::Prove
* prove --formatter MyCustom \
        --formatter File --file-option 'outfile=/foo.tap'
* Support short naming: HTML => App::Prove::Plugin::HTML

Documentation
* how to use from M::B
* how to use from prove

Notification
* will this break backwards compat?
* write to TAP::Formatter::* writers

