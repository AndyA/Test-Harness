Source Detector Todo
--------------------

y  Move Source --> SourceDetector
	All sub-classes too

y  Create a new 'Source' class
	structure:
		the raw source
		params (merge, switches, test_args)
		meta (assembles it too)
		(note to self: include shebang for Perl source)
		config?
	move meta data assembling from SourceFactory
  ?	could have different sub-classes for internal cases

y   Refactory SourceFactory
	use new Source class from Parser
	remove assemble_meta

y   Phase out current IteratorFactory & old Source
	source detectors should instantiate appropriate iterator
	in Parser:
	   iterator_factory_class
	   make_iterator
	   _default_iterator_factory_class
	   _default_source_class
	   _default_perl_source_class
	   source_class
	   perl_source_class
	   make_source
	   make_perl_source

    Refactor SourceDetectors
	whittle down to 2 methods:
	   y	can_handle( source [, config? ] )
	   y	make_iterator( source )
	factor out get_stream & instance methods
	TAP::Parser::SourceDetector::Perl
	   y	remove shebang detection
	don't need to inherit from TAP::Parser::SourceDetector

    Move SourceDetector --> SourceHandler?
	more descriptive of their function

    Clean up 'stream' vs 'iterator' usage
	in TAP::Parser
	   y	$stream
	   y	_stream
	   	->new( stream => ... )
	in TAP::Grammar
	   	$stream
	   	->new( stream => ... )
	mv streams.t -> iterators.t

    Refactor Iterators
	remove shebang detection
	other tasks?
	Exec iterator should be really easy to use
		rename to Exec ?
		make command available
		don't execute command until ->next called
		(makes testing easier)

    Phase out source

    Move SourceFactory --> IteratorFactory
	given a Source (+ config?)
	auto-loads source detectors from config
	chooses best detector to use, handing over:
		Source
		source-specific config?
	returns an iterator

y   Refactor the Parser
	creates a Source object
	uses IteratorFactory to create an iterator

    Replace all instances of 'stream' with 'iterator'
	or vice-versa?

    Refactor App::Prove to open access to new TAP::Harness source parameters


    Update docs


TODO:

    - Associate YAML diagnostic with the preceding test. Currently it's
      necessary to look ahead past a test to discover whether it has a
      diagnostic document.
      
    - Parallel testing scheduler rules.
    